using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Examples_A_to_Z
{
    class Yield_Return
    {
        public static void launchExample()
        {
            //Yield is keyword that interacts with the foreach-loop
            //Yield allows each iteration in a foreach-loop to be generated only when needed. Yield is actually an iterator, so you will see in the explanation below, it causes control
            //to return back to the caller immediately whatever value it has and then iterate right back to the next iteration if applicable after the caller is done with the 
            //individual return.
            //In this way the yield can improve performance.
            //We use yield in methods that return the type IEnumerable (without any angle brackets), or the type IEnumerable<Type> with a type parameter in the angle brackets.
            //When using yield however, in the IEnumerator.GetEnumerator method, the return type must be IEnumerator.
            /* 
             Yield return is similar to 
                - a return statement (which passes control flow to the calling method), 
                - followed by a "goto" to the yield statement in the next iteration of the foreach.
                Eg. Return to the caller
                    Goto
                Eg. To see a better example debug or refer to the debug comments below that shows where control of the program is located as it runs

             This behaviour of Return to the caller and Goto to the yield statement in the next iteration does not exist in the Common Language Runtime. 
             It is implemented by a class generated by the C# compiler
             This is executed and JIT-compiled by the CLR. Yield is a form of syntactic sugar.
            */
            string StartDebuggerHer = "Start Debugger here";
            Console.WriteLine(StartDebuggerHer);

            IEnumerable<int> GetNumbers()
            {
                Console.WriteLine("Do nothing");
                yield return 1;
                yield return 2;
                yield return 3;
            }

            //In the part of the foreach-loop following the "in" keyword, there is a method call to GetNumbers
            /*Control locations when debugging:
                - foreach
                - GetNumbers()
                - in 
                - yield return 1
                - in
                - var number
                - Console.WriteLine(number)
                - in
                - yield return 2
                - in
                - var number
                - Console.WriteLine(number)
                - in
                - yield return 3
                - in ...
            */
            foreach (var number in GetNumbers())
                Console.WriteLine(number);


            IEnumerable<int> GenerateWithoutYield()
            {
                var i = 0;
                var list = new List<int>();
                while (i < 5)
                    list.Add(++i);
                return list;
            }

            foreach (var number in GenerateWithoutYield())
                Console.WriteLine(number);



            IEnumerable<int> GenerateWithYield() 
            {
                var i = 0;
                while (i < 5)
                { 
                    yield return ++i;
                    Console.WriteLine("Do Absolutely nothing here for {0}",i);
                }
            }

            /*Control locations when debugging:
                - foreach
                - GenerateWithYield()
                - in 
                - goes to the beginning of the method where yield is to then get to yield return and return immediately
                - in
                - var number
                - Console.WriteLine(number)
                - in
                - goes back to exact spot of where it last left and completes what was in that context and then begin again from the top of the current context
                                                to then get to yield return again and return immediately
                 - in ...
            */
            foreach (var number in GenerateWithYield())
                Console.WriteLine(number);

        }

    }
}
